
@include define('universal-helpers') {


  /* _____ UNIVERSAL HELPERS _____ */

  // From H5BP
  // ==========================================================================

  // Image replacement
  @include _add(ir) {
    background-color: transparent;
    border: 0;
    overflow: hidden;
    // IE 6/7 fallback
    *text-indent: -32000rem;
    &:before {
      content: "";
      display: block;
      width: 0;
      height: 100%;
    }
  }

  // Hide from both screenreaders and browsers: h5bp.com/u
  @include _add(hidden) {
    display: none !important;
    visibility: hidden;
  }

  // Hide only visually, but have it available for screenreaders: h5bp.com/v
  @include _add(visuallyhidden) {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    // Extends the .visuallyhidden class to allow the element to be focusable
    // when navigated to via the keyboard: h5bp.com/p
    &.focusable:active,
    &.focusable:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }

  // Hide visually and from screenreaders, but maintain layout
  @include _add(invisible) {
    visibility: hidden;
  }

  // Contain floats: h5bp.com/q
  @include _add(clearfix) {
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
    *zoom: 1;
  }

  /**
   * Grayscale image effect
   *
   * @see http://labs.voronianski.com/css3-grayscale/
   * @see http://www.karlhorky.com/2012/06/cross-browser-image-grayscale-with-css.html
   */
  @include _add(grayscale) {
    body:not(:-moz-handler-blocked) & {
      filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\' filterRes=\'300\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 10+ */
    }
    filter: gray; /* IE6-9 */
    -webkit-filter: grayscale(100%); /* Chrome 19+ & Safari 6+ */
    -webkit-transition: -webkit-filter .6s ease; /* Fade to color for Chrome and Safari */
    -moz-transition: filter .6s ease;
    -ms-transition: filter .6s ease;
    -o-transition: filter .6s ease;
    transition: filter .6s ease;
    -webkit-backface-visibility: hidden; /* Fix for transition flickering */
  }
  @include _add(grayscale-disable) {
    filter: none; /* IE6-9 */
    body:not(:-moz-handler-blocked) & {
      filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\' filterRes=\'300\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
    }
    -webkit-filter: grayscale(0%);
  }

  // from Ekino  ***** */

  @include _add(inlineBlock) {
    display: inline-block;
    .lt-ie8 & {
      display: inline;
    }
  }

  @include _add(verticalAlign) {
    &:before {
      @include _use(inlineBlock);
      vertical-align: middle;
      content: "";
      height: 100%;
      width: 0;
      margin: 0;
    }
    @include _use(inlineBlock);
    vertical-align: middle;
  }

  /*
   * This may place the element on a half pixel resulting in blurry text. To
   * prevent this, apply 'transform-style: preserve-3d;' to the parent element.
   */
  @include _add(verticalAlign2) {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  @include _add(nonSelectable) {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
}

@mixin js--enabled() {
  @at-root html.js #{&} {
    @content;
  }
}

@mixin js--disabled() {
  @at-root html.no-js #{&} {
    @content;
  }
}

// TODO - the & isn't working correctly
@mixin animation--enabled() {
  @at-root html #{&} {
    // TODO actually do a test for animation enabled
    @content;
  }
}

@function plinth_color($name) {
  $_return: #fff;

  @if map-has-key($project-colors, $name) {
    $_return: map-get($project-colors, $name);
  } @else {
    @error "The color named #{$name} is not defined in $project-colors";
  }

  @return $_return;
}
